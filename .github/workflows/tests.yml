name: Tests

# TODO
# 1. activate -Werror
# 2. use steps for sc/p4est/t8code

on:
  push:
    branches:
      - master
      - develop
#      - feature-*CI* # for testing this script, all feature branches with "CI" in their name
  pull_request:
    branches:
      - master
      - develop
  workflow_dispatch: # Be able to trigger this manually on github.com

jobs:
  build:

    runs-on: ubuntu-18.04
#    env:
#      SC_DEBUG: '${{ GITHUB_ACTION_PATH }}/sc/build_debug'
#      SC_NONDEBUG: '${{ GITHUB_ACTION_PATH }}/sc/build_nondebug'
#      P4EST_DEBUG: '${{ GITHUB_ACTION_PATH }}/p4est/build_debug'
#      P4EST_NONDEBUG: '${{ GITHUB_ACTION_PATH }}/p4est/build_nondebug'
#      CONFIG_OPTIONS: --without-blas
#      CONFIG_DEBUG: $CONFIG_OPTIONS --enable-debug --with-sc=$SC_DEBUG --with-p4est=$P4EST_DEBUG
#      CONFIG_RELEASE: $CONFIG_OPTIONS --with-sc=$SC_NONDEBUG --with-p4est=$P4EST_NONDEBUG
#      CONFIG_MPI_DEBUG: $CONFIG_DEBUG --enable-mpi 
#      CONFIG_MPI_RELEASE: $CONFIG_RELEASE --enable-mpi 
    
    steps:
# Setup and bootstrap
    - uses: actions/checkout@v1
    - name: define vars
      env: 
	SC_DEBUG: sc/build_debug
    - name: Variable check 1 sc/p4est
      run: echo [${{ env.SC_DEBUG }}] [$SC_NONDEBUG] [$P4EST_DEBUG] [$P4EST_NONDEBUG]
    - name: Variable check 2 config options
      run: echo [$CONFIG_OPTIONS] [$CONFIG_DEBUG] [$CONFIG_RELEASE] [$CONFIG_MPI_DEBUG] [$CONFIG_MPI_RELEASE]
    - name: Install mpich
      run: sudo apt-get update && sudo apt-get install libmpich-dev
    - name: init submodules
      run: git submodule init
    - name: update submodules
      run: git submodule update
    - name: bootstrap
      run: ./bootstrap
      ## install sc-debug and sc-non-debug
    - name: install sc
      run: echo "Install sc"
    - name: make folders
      run: mkdir sc/build_debug && mkdir sc/build_nondebug
    - name: sc configure debug
      run: cd sc/build_debug && ../configure --enable-mpi --enable-debug --prefix=$PWD/install
    - name: sc build debug
      run: cd sc/build_debug && make -j V=0 && make -j V=0 install
    - name: sc configure and build nondebug
      run: cd sc/build_nondebug && ../configure --enable-mpi --enable-debug --prefix=$PWD/install
    - name: sc build nondebug
      run: cd sc/build_nondebug && make -j V=0 && make -j V=0 install
    - name: OnFailPrintLog
      if: failure()
      run: cat sc/build_nondebug/config.log && cat sc/build_debug/config.log
# install p4est-debug and p4est-non-debug
    - name: install p4est
      run: echo "Install p4est"
    - name: make folders
      run: mkdir p4est/build_debug && mkdir p4est/build_nondebug
    - name: p4est configure debug
      run: cd p4est/build_debug && ../configure --enable-mpi --enable-debug --prefix=$PWD/install --with-sc=$SC_DEBUG
    - name: p4est build debug
      run: make -j V=0 && make -j V=0 install
    - name: OnFailPrintLog
      if: failure()
      run: cat p4est/build_debug/config.log
    - name: p4est configure and build nondebug
      run: cd p4est/build_nondebug && ../configure --enable-mpi --prefix=$PWD/install --with-sc=$SC_NONDEBUG
    - name: p4est build nondebug
      run: cd p4est/build_nondebug && make -j V=0 && make -j V=0 install
    - name: OnFailPrintLog
      if: failure()
      run: cat p4est/build_nondebug/config.log
# configure and test with MPI (release mode)
    - name: check release mode
      run: echo "Checking release mode (MPI)"
    - name: configure
      run: mkdir build_release && cd build_release && ./configure $CONFIG_MPI_RELEASE
    - name: OnFailPrintLog
      if: failure()
      run: cat build_release/config.log
    - name: make
      run: cd build_release && make -j V=0
    - name: make check
      run: cd build_release && make check -j4 V=0
# configure and test with MPI (debug mode)
    - name: check debugging mode
      run: echo "Checking debug mode"
    - name: configure
      run: mkdir build_debug && cd build_debug && ./configure $CONFIG_MPI_DEBUG
    - name: OnFailPrintLog
      if: failure()
      run: cat config.log
    - name: make
      run: cd build_debug && make -j V=0
    - name: make check
      run: cd build_debug && make check -j4 V=0
    - name: clean up
      run: make distclean
# configure and test with MPI (C++ compiler only, release mode)
    - name: check C++ compiler
      run: echo "Checking C++, release mode (MPI)"
    - name: configure
      run: mkdir build_release_cpp &&cd build_release_cpp && ./configure CC=mpicxx CXX=mpicxx $CONFIG_MPI_RELEASE
    - name: OnFailPrintLog
      if: failure()
      run: cat build_release_cpp/config.log
    - name: make
      run: cd build_release_cpp && make -j V=0
    - name: make check
      run: make check -j4 V=0
# configure and test serial (release mode)
    - name: check serial
      run: echo "Checking serial release mode"
    - name: configure
      run: mkdir build_serial_release && cd build_serial_release && ./configure $CONFIG_RELEASE
    - name: OnFailPrintLog
      if: failure()
      run: cat build_serial_release/config.log
    - name: make
      run: cd build_serial_release && make -j V=0
    - name: make check
      run: cd build_serial_release && make check -j4 V=0
# configure and test serial (debug mode)
    - name: check serial
      run: echo "Checking debugging mode"
    - name: configure
      run: mkdir build_serial_debug && ./configure $CONFIG_DEBUG
    - name: OnFailPrintLog
      if: failure()
      run: cat build_serial_release/config.log
    - name: make
      run: cd build_serial_release && make -j V=0
    - name: make check
      run: cd build_serial_release && make check -j4 V=0
# configure and test with MPI and netcdf
    - name: Install netcdf
      run: sudo apt-get install libnetcdf-dev
    - name: configure
      run: mkdir build_netcdf && ./configure $CONFIG_MPI_RELEASE --with-netcdf
    - name: OnFailPrintLog
      if: failure()
      run: cat build_netcdf/config.log
    - name: make
      run: cd build_netcdf && make -j V=0
    - name: make check
      run: cd build_netcdf && make check -j4 V=0
